{
  "name": "IS Analytics Login Attempts Map",
  "id": "IsAnalyticsLoginAttemptsMap",
  "thumbnailURL": "",
  "configs": {
    "pubsub": {
      "types": [
        "subscriber",
      ]
    },
    "options": [
      {
        "id": "widgetType",
        "title": "Widget Type",
        "type": {
          "name": "ENUM",
          "possibleValues": [
            "Overall",
            "Local",
            "Federated"
          ]
        },
        "defaultValue": "Overall"
      },
      {
        "id": "headerTitle",
        "title": "Widget Display Name",
        "type": {
          "name": "TEXT",
          "possibleValues": []
        },
        "defaultValue": "Login Attempts Map"
      }
    ],
    "providerConfig": {
      "configs": {
        "type": "SiddhiStoreDataProvider",
        "config": {
          "siddhiApp": "@App:name(\"IS_ANALYTICS_AUTHENTICATION_AGGREGATIONS\") @App:description(\"Handle Event from IS and save data in a table for Overall Authentication\") define stream ProcessedAuthenticationDataStream (meta_tenantId int, eventId string, username string, localUsername string, userStoreDomain string, tenantDomain string, rolesCommaSeparated string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, stepAuthenticator string, authenticationStep string, authStepSuccess bool, identityProvider string, identityProviderType string, isFirstLogin bool, successValue int, failureValue int, stepSuccessValue int, firstLoginValue int, timestamp long); @store(type='rdbms', datasource='IS_ANALYTICS_DB') define aggregation AuthStatAgg from ProcessedAuthenticationDataStream select meta_tenantId, username, localUsername, rolesCommaSeparated, serviceProvider, identityProvider, remoteIp, region, userStoreDomain, isFirstLogin, sum(successValue) as authSuccessCount, sum(failureValue) as authFailureCount, sum(stepSuccessValue) as authStepSuccessCount, sum(firstLoginValue) as authFirstSuccessCount, identityProviderType, timestamp group by meta_tenantId, username, localUsername, remoteIp, rolesCommaSeparated aggregate by timestamp every second ... year;",
          "queryData": {
            "query": "from AuthStatAgg {{filterCondition}} within {{from}}L, {{to}}L per \"{{per}}s\" select region, sum({{countType}}) as countValue group by region having countValue > 0 "
          },
          "incrementalColumn": "contextId",
          "publishingInterval": 5,
          "purgingInterval": 60,
          "publishingLimit": 30,
          "purgingLimit": 60,
          "isPurgingEnable": false
        }
      }
    }
  }
}
